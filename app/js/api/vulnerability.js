'use strict';

const apiModule = require('./');

// const URI = require('urijs');

//TODO: take out when api is done
const find = require('lodash/find');

/**
 * @ngInject
 */
function Vulnerability ($q,
                        VMAAS_GET_ALL_CVES,
                        VMAAS_GET_ALL_PACKAGES,
                        VMAAS_PACKAGES_NOCVE,
                        VMAAS_GET_ALL_RHSAS,
                        VMAAS_GET_RHSA,
                        VMAAS_GET_CVE) {

    // function Policy ($http, AccountService, InsightsConfig) {

    // const vulnerabilitiesUri = 'vulnerabilities';
    // const root = InsightsConfig.apiRoot;

    return {

        // getAll (params) {
        //     let url = URI(root);
        //     url.segment(vulnerabilitiesUri);
        //     url.addSearch(AccountService.queryParam());

        //     if (params) {
        //         url.addSearch(params);
        //     }

        //     return $http.get(url.toString());
        // },

        getPackages () {
            return $q.resolve(VMAAS_GET_ALL_PACKAGES);
        },

        getPackage(id) {
            let pkg;
            if (typeof id === 'string') {
                pkg = find(VMAAS_PACKAGES_NOCVE, {id: parseInt(id)});
            } else {
                pkg = find(VMAAS_PACKAGES_NOCVE, {id: id});
            }

            return $q.resolve(pkg);
        },

        getRHSAs () {
            return $q.resolve(VMAAS_GET_ALL_RHSAS);
        },

        getRHSA (id) {
            return $q.resolve(VMAAS_GET_RHSA[id]);
        },

        getCVEs () {
            return $q.resolve(VMAAS_GET_ALL_CVES);
        },

        getCVE (id) {
            return $q.resolve(VMAAS_GET_CVE[id]);
        }
    };
}

apiModule.factory('Vulnerability', Vulnerability);
